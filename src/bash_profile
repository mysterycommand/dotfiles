# .bash_profile

if [ -f ~/.bashrc ]; then
    . ~/.bashrc
fi

if [ -f ~/.bash_local ]; then
    . ~/.bash_local
fi

PATH=$PATH:./node_modules/.bin
PATH=$PATH:~/bin

PATH=$HOME/.cargo/bin:$PATH
PATH=/Library/Frameworks/Python.framework/Versions/3.7/bin:$PATH
PATH=/usr/local/opt/ruby/bin:$PATH

export PATH

# NVM
if [ -f /usr/local/opt/nvm/nvm.sh ]; then
    export NVM_DIR=~/.nvm
    . /usr/local/opt/nvm/nvm.sh
fi

# Bash completion
if [ -f /usr/local/etc/bash_completion ]; then
    . /usr/local/etc/bash_completion
fi

# Git completion
if [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
    . /usr/local/etc/bash_completion.d/git-completion.bash
fi

# Git prompt
if [ -f /usr/local/etc/bash_completion.d/git-prompt.sh ]; then
    . /usr/local/etc/bash_completion.d/git-prompt.sh
fi

#
# this is for running linuxbrew inside of WSL 2
# who am I even!? here's what I installed with brew after getting it running:
#
# `brew install gcc bash-completion nvm tree git coreutils`
#

if [ -f /home/linuxbrew/.linuxbrew/bin/brew ]; then
    eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
fi

# fnm
# @see https://github.com/Schniz/fnm#bash
eval "$(fnm env)"

if [ -s /home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm ]; then
    . /home/linuxbrew/.linuxbrew/opt/nvm/etc/bash_completion.d/nvm  # This loads nvm bash_completion
fi

# Bash completion
if [ -r /home/linuxbrew/.linuxbrew/etc/profile.d/bash_completion.sh ]; then
    . /home/linuxbrew/.linuxbrew/etc/profile.d/bash_completion.sh
fi

if [ -f /home/linuxbrew/.linuxbrew/etc/bash_completion ]; then
    . /home/linuxbrew/.linuxbrew/etc/bash_completion
fi

# Git completion
if [ -f /home/linuxbrew/.linuxbrew/etc/bash_completion.d/git-completion.bash ]; then
    . /home/linuxbrew/.linuxbrew/etc/bash_completion.d/git-completion.bash
fi

# Git prompt
if [ -f /home/linuxbrew/.linuxbrew/etc/bash_completion.d/git-prompt.sh ]; then
    . /home/linuxbrew/.linuxbrew/etc/bash_completion.d/git-prompt.sh
fi

#
# this is for running linuxbrew inside of WSL 2
# who am I even!?
#

# Git prompt config
if [[ -n `type __git_ps1` ]]; then
    GIT_PS1_SHOWDIRTYSTATE=1
    GIT_PS1_SHOWSTASHSTATE=1
    GIT_PS1_SHOWUNTRACKEDFILES=1
    GIT_PS1_SHOWUPSTREAM="verbose"
    # GIT_PS1_STATESEPERATOR=SP
    GIT_PS1_SHOWCOLORHINTS=1
    # PS1='[\W$(__git_ps1 " (%s)")]\n\T \$ '
    PROMPT_COMMAND='__git_ps1 "\n\w" "\n\T \$ "'
fi

# Readline settings
# NOTE: Bind is used instead of setting these in .inputrc.
bind "set bell-style none"              # No bell (the sound)
bind "set completion-ignore-case on"    # Ignore case in bash completion
bind "set show-all-if-ambiguous On"     # Automatically show completion without double-tab-ing

# History settings
export HISTFILE=~/.bash_history
export HISTFILESIZE=20000
export HISTCONTROL=ignoreboth
shopt -s histappend

# Aliases
alias clr="clear && clear"
alias ll="ls -ltrG"
alias lla="ll -a"
alias ..="cd .."
alias resource=". ~/.bash_profile"

alias rebrew="brew update && brew upgrade"
alias renvm="nvm install lts/* && nvm alias default lts/*"
alias renpm="npm -g i npm && npm -g up"
alias regem="gem update --system && gem update"
alias rerust="rustup update && cargo install-update -a"

alias reup="rebrew && renvm && renpm && regem && rerust"

md() { mkdir -pv "$@" && cd "$_"; }

# gnumfmt isn't preinstalled on macOS, so `brew install coreutils` first
function sizes {
  echo "minified  gzipped  filename"
  echo "========  =======  ========"
  for file in "$@"
  do
    minified=$(cat $file | wc -c | gnumfmt --to=iec --suffix=B)
    gzipped=$(gzip -9 -c $file | wc -c | gnumfmt --to=iec --suffix=B)
    printf "%8s %8s  %s\n" $minified $gzipped $file
  done
}

# # SSH Agent
# SSH_ENV=~/.ssh/environment

# function startagent {
#     /usr/bin/ssh-agent | sed 's/^echo/# echo/' > ${SSH_ENV};
#     chmod 600 ${SSH_ENV};
#     . ${SSH_ENV} > /dev/null;
#     /usr/bin/ssh-add;
# }

# if [ -f "${SSH_ENV}" ]; then
#     . ${SSH_ENV} > /dev/null;
#     ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#         startagent;
#     };
# else
#     startagent;
# fi
